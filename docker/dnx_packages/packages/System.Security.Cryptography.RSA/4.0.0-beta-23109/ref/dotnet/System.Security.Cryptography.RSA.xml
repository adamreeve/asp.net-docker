<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.RSA</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.CspKeyContainerInfo">
      <summary>Provides additional information about a cryptographic key pair. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> class using the specified parameters.</summary>
      <param name="parameters">A <see cref="T:System.Security.Cryptography.CspParameters" /> object that provides information about the key.</param>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Accessible">
      <summary>Gets a value indicating whether a key in a key container is accessible.</summary>
      <returns>true if the key is accessible; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">The key type is not supported.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Exportable">
      <summary>Gets a value indicating whether a key can be exported from a key container.</summary>
      <returns>true if the key can be exported; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">The key type is not supported.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider cannot be found.-or-The key container was not found.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice">
      <summary>Gets a value indicating whether a key is a hardware key.</summary>
      <returns>true if the key is a hardware key; otherwise, false.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider cannot be found.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName">
      <summary>Gets a key container name.</summary>
      <returns>The key container name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber">
      <summary>Gets a value that describes whether an asymmetric key was created as a signature key or an exchange key.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.KeyNumber" /> values that describes whether an asymmetric key was created as a signature key or an exchange key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore">
      <summary>Gets a value indicating whether a key is from a machine key set.</summary>
      <returns>true if the key is from the machine key set; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Protected">
      <summary>Gets a value indicating whether a key pair is protected.</summary>
      <returns>true if the key pair is protected; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">The key type is not supported.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider cannot be found.-or-The key container was not found.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.ProviderName">
      <summary>Gets the provider name of a key.</summary>
      <returns>The provider name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.ProviderType">
      <summary>Gets the provider type of a key.</summary>
      <returns>The provider type. The default is 1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated">
      <summary>Gets a value indicating whether a key container was randomly generated by a managed cryptography class.</summary>
      <returns>true if the key container was randomly generated; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.Removable">
      <summary>Gets a value indicating whether a key can be removed from a key container.</summary>
      <returns>true if the key is removable; otherwise, false.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) was not found.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName">
      <summary>Gets a unique key container name.</summary>
      <returns>The unique key container name.</returns>
      <exception cref="T:System.NotSupportedException">The key type is not supported.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider cannot be found.-or-The key container was not found.</exception>
    </member>
    <member name="T:System.Security.Cryptography.CspParameters">
      <summary>Contains parameters that are passed to the cryptographic service provider (CSP) that performs cryptographic computations. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> class with the specified provider type code.</summary>
      <param name="dwTypeIn">A provider type code that specifies the kind of provider to create. </param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> class with the specified provider type code and name.</summary>
      <param name="dwTypeIn">A provider type code that specifies the kind of provider to create.</param>
      <param name="strProviderNameIn">A provider name. </param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> class with the specified provider type code and name, and the specified container name.</summary>
      <param name="dwTypeIn">The provider type code that specifies the kind of provider to create.</param>
      <param name="strProviderNameIn">A provider name. </param>
      <param name="strContainerNameIn">A container name. </param>
    </member>
    <member name="P:System.Security.Cryptography.CspParameters.Flags">
      <summary>Represents the flags for <see cref="T:System.Security.Cryptography.CspParameters" /> that modify the behavior of the cryptographic service provider (CSP).</summary>
      <returns>An enumeration value, or a bitwise combination of enumeration values.</returns>
      <exception cref="T:System.ArgumentException">Value is not a valid enumeration value.</exception>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyContainerName">
      <summary>Represents the key container name for <see cref="T:System.Security.Cryptography.CspParameters" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyNumber">
      <summary>Specifies whether an asymmetric key is created as a signature key or an exchange key.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CspParameters.ParentWindowHandle">
      <summary>Gets or sets a handle to the unmanaged parent window for a smart card password dialog box.</summary>
      <returns>A handle to the parent window for a smart card password dialog box.</returns>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderName">
      <summary>Represents the provider name for <see cref="T:System.Security.Cryptography.CspParameters" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderType">
      <summary>Represents the provider type code for <see cref="T:System.Security.Cryptography.CspParameters" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CspProviderFlags">
      <summary>Specifies flags that modify the behavior of the cryptographic service providers (CSP).</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.CreateEphemeralKey">
      <summary>Create a temporary key that is released when the associated Rivest-Shamir-Adleman (RSA) object is closed. Do not use this flag if you want your key to be independent of the RSA object.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.NoFlags">
      <summary>Do not specify any settings.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.NoPrompt">
      <summary>Prevent the CSP from displaying any user interface (UI) for this context.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseArchivableKey">
      <summary>Allow a key to be exported for archival or recovery.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseDefaultKeyContainer">
      <summary>Use key information from the default key container.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseExistingKey">
      <summary>Use key information from the current key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore">
      <summary>Use key information from the computer's key store.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseNonExportableKey">
      <summary>Use key information that cannot be exported.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseUserProtectedKey">
      <summary>Notify the user through a dialog box or another method when certain actions are attempting to use a key.  This flag is not compatible with the <see cref="F:System.Security.Cryptography.CspProviderFlags.NoPrompt" /> flag.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ICspAsymmetricAlgorithm">
      <summary>Defines methods that allow an <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> class to enumerate key container information, and import and export Microsoft Cryptographic API (CAPI)–compatible key blobs.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> object that describes additional information about a cryptographic key pair.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> object that describes additional information about a cryptographic key pair.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)">
      <summary>Exports a blob that contains the key information associated with an <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.  </summary>
      <returns>A byte array that contains the key information associated with an <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.</returns>
      <param name="includePrivateParameters">true to include the private key; otherwise, false.</param>
    </member>
    <member name="M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])">
      <summary>Imports a blob that represents asymmetric key information.  </summary>
      <param name="rawData">A byte array that represents an asymmetric key blob.</param>
    </member>
    <member name="T:System.Security.Cryptography.KeyNumber">
      <summary>Specifies whether to create an asymmetric signature key or an asymmetric exchange key. </summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyNumber.Exchange">
      <summary>An exchange key pair used to encrypt session keys so that they can be safely stored and exchanged with other users.  </summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyNumber.Signature">
      <summary>A signature key pair used for authenticating digitally signed messages or files.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>Represents the base class from which all implementations of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm inherit.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>When overridden in a derived class, decrypts the input data using the private key.[This documentation is preliminary and is subject to change in the next release of the .NET Framework 4.6.]</summary>
      <returns>The resulting decryption of the <paramref name="rgb" /> parameter in plain text.</returns>
      <param name="rgb">The cipher text to be decrypted. </param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>When overridden in a derived class, encrypts the input data using the public key.[This documentation is preliminary and is subject to change in the next release of the .NET Framework 4.6.]</summary>
      <returns>The resulting encryption of the <paramref name="rgb" /> parameter as cipher text.</returns>
      <param name="rgb">The plain text to be encrypted. </param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>When overridden in a derived class, exports the <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <returns>The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</returns>
      <param name="includePrivateParameters">true to include private parameters; otherwise, false. </param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>When overridden in a derived class, imports the specified <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <param name="parameters">The parameters for <see cref="T:System.Security.Cryptography.RSA" />. </param>
    </member>
    <member name="T:System.Security.Cryptography.RSACryptoServiceProvider">
      <summary>Performs asymmetric encryption and decryption using the implementation of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class using the default key.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class with the specified key size.</summary>
      <param name="dwKeySize">The size of the key to use in bits. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class with the specified key size and parameters.</summary>
      <param name="dwKeySize">The size of the key to use in bits. </param>
      <param name="parameters">The parameters to be passed to the cryptographic service provider (CSP). </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The CSP cannot be acquired.-or- The key cannot be created. </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class with the specified parameters.</summary>
      <param name="parameters">The parameters to be passed to the cryptographic service provider (CSP). </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The CSP cannot be acquired. </exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> object that describes additional information about a cryptographic key pair. </summary>
      <returns>A <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> object that describes additional information about a cryptographic key pair.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)">
      <summary>Decrypts data with the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
      <returns>The decrypted data, which is the original plain text before encryption.</returns>
      <param name="rgb">The data to be decrypted. </param>
      <param name="fOAEP">true to perform direct <see cref="T:System.Security.Cryptography.RSA" /> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, false to use PKCS#1 v1.5 padding. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.-or- The <paramref name="fOAEP" /> parameter is true and the length of the <paramref name="rgb" /> parameter is greater than <see cref="P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize" />.-or- The <paramref name="fOAEP" /> parameter is true and OAEP is not supported. -or- The key does not match the encrypted data. However, the exception wording may not be accurate. For example, it may say Not enough storage is available to process this command.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgb " />is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])">
      <summary>This method is not supported in the current version.</summary>
      <returns>The decrypted data, which is the original plain text before encryption.</returns>
      <param name="rgb">The data to be decrypted. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported in the current version. </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)">
      <summary>Encrypts data with the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
      <returns>The encrypted data.</returns>
      <param name="rgb">The data to be encrypted. </param>
      <param name="fOAEP">true to perform direct <see cref="T:System.Security.Cryptography.RSA" /> encryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, false to use PKCS#1 v1.5 padding. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.-or- The length of the <paramref name="rgb" /> parameter is greater than the maximum allowed length.-or- The <paramref name="fOAEP" /> parameter is true and OAEP padding is not supported. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgb " />is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])">
      <summary>This method is not supported in the current version.</summary>
      <returns>The encrypted data.</returns>
      <param name="rgb">The data to be encrypted. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported in the current version. </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)">
      <summary>Exports a blob containing the key information associated with an <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> object.  </summary>
      <returns>A byte array containing the key information associated with an <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> object.</returns>
      <param name="includePrivateParameters">true to include the private key; otherwise, false.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)">
      <summary>Exports the <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <returns>The parameters for <see cref="T:System.Security.Cryptography.RSA" />.</returns>
      <param name="includePrivateParameters">true to include private parameters; otherwise, false. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key cannot be exported. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])">
      <summary>Imports a blob that represents RSA key information.  </summary>
      <param name="keyBlob">A byte array that represents an RSA key blob.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>Imports the specified <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <param name="parameters">The parameters for <see cref="T:System.Security.Cryptography.RSA" />. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.-or- The <paramref name="parameters" /> parameter has missing fields. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize">
      <summary>Gets the size of the current key.</summary>
      <returns>The size of the key in bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp">
      <summary>Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).</summary>
      <returns>true if the key should be persisted in the CSP; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> object contains only a public key.</summary>
      <returns>true if the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> object contains only a public key; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)">
      <summary>Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified data.</returns>
      <param name="buffer">The input data for which to compute the hash. </param>
      <param name="offset">The offset into the array from which to begin using data. </param>
      <param name="count">The number of bytes in the array to use as data. </param>
      <param name="halg">The hash algorithm to use to create the hash value. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="halg" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="halg" /> parameter is not a valid type. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)">
      <summary>Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified data.</returns>
      <param name="buffer">The input data for which to compute the hash. </param>
      <param name="halg">The hash algorithm to use to create the hash value. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="halg" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="halg" /> parameter is not a valid type. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)">
      <summary>Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified data.</returns>
      <param name="inputStream">The input data for which to compute the hash. </param>
      <param name="halg">The hash algorithm to use to create the hash value. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="halg" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="halg" /> parameter is not a valid type. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
      <summary>Computes the signature for the specified hash value by encrypting it with the private key.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified hash value.</returns>
      <param name="rgbHash">The hash value of the data to be signed. </param>
      <param name="str">The hash algorithm identifier (OID) used to create the hash value of the data. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rgbHash" /> parameter is null. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.-or- There is no private key. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore">
      <summary>Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.</summary>
      <returns>true if the key should be persisted in the computer key store; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])">
      <summary>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="buffer">The data that was signed. </param>
      <param name="halg">The name of the hash algorithm used to create the hash value of the data. </param>
      <param name="signature">The signature data to be verified. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="halg" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="halg" /> parameter is not a valid type. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
      <summary>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="rgbHash">The hash value of the signed data. </param>
      <param name="str">The hash algorithm identifier (OID) used to create the hash value of the data. </param>
      <param name="rgbSignature">The signature data to be verified. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rgbHash" /> parameter is null.-or- The <paramref name="rgbSignature" /> parameter is null. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.-or- The signature cannot be verified. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>Represents the standard parameters for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>Represents the D parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>Represents the DP parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>Represents the DQ parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>Represents the Exponent parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>Represents the InverseQ parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>Represents the Modulus parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>Represents the P parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>Represents the Q parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</summary>
    </member>
  </members>
</doc>