<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Hashing</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
      <summary>表示所有加密哈希算法实现均必须从中派生的基类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
      <summary>计算指定字节数组的哈希值。</summary>
      <returns>计算所得的哈希代码。</returns>
      <param name="buffer">要计算其哈希代码的输入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
      <summary>计算指定字节数组的指定区域的哈希值。</summary>
      <returns>计算所得的哈希代码。</returns>
      <param name="buffer">要计算其哈希代码的输入。</param>
      <param name="offset">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="count">数组中用作数据的字节数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 是无效值。- 或 -<paramref name="buffer" /> 长度无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 超出范围。此参数需要非负数。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
      <summary>计算指定 <see cref="T:System.IO.Stream" /> 对象的哈希值。</summary>
      <returns>计算所得的哈希代码。</returns>
      <param name="inputStream">要计算其哈希代码的输入。</param>
      <exception cref="T:System.ObjectDisposedException">对象已被释放。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose">
      <summary>释放 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 占用的非托管资源，还可以释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将写入对象的数据路由到哈希算法以计算哈希值。</summary>
      <param name="array">要计算其哈希代码的输入。</param>
      <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="cbSize">字节数组中用作数据的字节数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
      <summary>当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。</summary>
      <returns>计算所得的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
      <summary>获取计算所得的哈希代码的大小（以位为单位）。</summary>
      <returns>计算所得的哈希代码的大小（以位为单位）。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 类的实现。</summary>
    </member>
    <member name="T:System.Security.Cryptography.HMAC">
      <summary>表示基于哈希的消息验证代码 (HMAC) 的所有实现必须从中派生的抽象类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.HMAC" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)">
      <summary>密钥更改合法时释放由 <see cref="T:System.Security.Cryptography.HMAC" /> 类使用的非托管资源，并可选择释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将写入对象的数据路由给默认 <see cref="T:System.Security.Cryptography.HMAC" /> 哈希算法以计算哈希值。</summary>
      <param name="rgb">输入数据。</param>
      <param name="ib">字节数组中的偏移量，从该位置开始使用数据。</param>
      <param name="cb">数组中用作数据的字节数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashFinal">
      <summary>当在派生类中重写时，在加密流对象处理完最后的数据后完成哈希计算。</summary>
      <returns>字节数组中计算所得的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.HashName">
      <summary>获取或设置用于哈希计算的哈希算法的名称。</summary>
      <returns>哈希算法的名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法更改当前的哈希算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Initialize">
      <summary>初始化默认 <see cref="T:System.Security.Cryptography.HMAC" /> 实现的实例。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.Key">
      <summary>获取或设置用于哈希算法的密钥。</summary>
      <returns>用于哈希算法的密钥。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">试图在哈希计算开始后更改 <see cref="P:System.Security.Cryptography.HMAC.Key" /> 属性。</exception>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
      <summary>显示所有加密哈希算法实现均必须从中派生的抽象类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 占用的非托管资源，还可以释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
      <summary>获取或设置用于哈希算法的密钥。</summary>
      <returns>用于哈希算法的密钥。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">尝试在哈希计算已开始后更改 <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key" /> 属性。</exception>
    </member>
  </members>
</doc>