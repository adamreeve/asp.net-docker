<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Encryption</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.AsymmetricAlgorithm">
      <summary>모든 비대칭 알고리즘의 구현에서 상속해야 하는 추상 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">파생 클래스 구현이 잘못된 경우 </exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true로 설정하고, 관리되지 않는 리소스만 해제하려면 false로 설정합니다. </param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize">
      <summary>비대칭 알고리즘에서 사용하는 키 모듈러스의 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>비대칭 알고리즘에서 사용하는 키 모듈러스의 크기(비트 단위)입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 모듈러스의 크기가 잘못된 경우 </exception>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
      <summary>비대칭 알고리즘에서 지원하는 키 크기를 가져옵니다.</summary>
      <returns>비대칭 알고리즘에서 지원하는 키 크기가 들어 있는 배열입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CipherMode">
      <summary>암호화에 사용할 블록 암호화 모드를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CBC">
      <summary>CBC(Cipher Block Chaining) 모드를 통해 피드백이 형성됩니다.일반 텍스트 블록이 암호화되기 전에 비트 배타적 OR 연산에 의해 이전 블록의 암호화 텍스트와 결합됩니다.따라서 일반 텍스트에 여러 개의 동일한 블록이 들어 있어도 각각 다른 암호화 텍스트 블록으로 암호화됩니다.블록이 암호화되기 전에 비트 배타적 OR 연산에 의해 초기화 벡터에 첫 번째 일반 텍스트 블록이 결합됩니다.암호화 텍스트 블록의 한 비트라도 손상되면 대응하는 일반 텍스트 블록도 손상됩니다.또한 손상된 원본 비트와 같은 위치에 있는 다음 블록의 비트도 손상됩니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CTS">
      <summary>CTS(Cipher Text Stealing) 모드는 길이 제한 없이 일반 텍스트를 처리하고 일반 텍스트와 동일한 길이를 갖는 암호화 텍스트를 생성합니다.이 모드는 일반 텍스트의 마지막 두 블록을 제외한 모든 블록에 대해 CBC 모드와 동일하게 작동됩니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.ECB">
      <summary>ECB(Electronic Codebook) 모드는 각 블록을 개별적으로 암호화합니다.동일하면서 같은 메시지에 포함되어 있는 일반 텍스트의 블록이나 같은 키로 암호화된 다른 메시지에 있는 일반 텍스트의 블록이 모두 동일한 암호화 텍스트 블록으로 변환됩니다.중요:  이 모드를 사용하면 여러 보안 위험에 노출될 수 있으므로 사용하지 않는 것이 좋습니다.암호화할 일반 텍스트에 반복 부분이 포함되어 있으면 암호화 텍스트를 한 번에 하나의 블록으로 쉽게 구분할 수 있습니다.블록 분석을 사용하여 암호화 키를 확인할 수도 있습니다.또한 다른 사용자가 몰래 개별 블록을 대체하거나 교환할 수 있으므로 다른 시점에 몰래 블록을 스트림에 저장 및 삽입할 수 있습니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>암호화 작업 중 오류가 발생할 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>기본 속성을 사용하여 <see cref="T:System.Security.Cryptography.CryptographicException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>지정된 HRESULT 오류 코드를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="hr">HRESULT 오류 코드입니다. </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다. </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다. </param>
      <param name="inner">현재 예외의 원인이 되는 예외입니다.<paramref name="inner" /> 매개 변수가 null이 아니면 현재 예외는 내부 예외를 처리하는 catch 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>지정한 형식에서 지정된 오류 메시지를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="format">오류 메시지를 출력하는데 사용하는 형식입니다. </param>
      <param name="insert">예외에 대한 이유를 설명하는 오류 메시지입니다. </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
      <summary>데이터 스트림을 암호화 변환에 연결하는 스트림을 정의합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
      <summary>대상 데이터 스트림, 사용할 변환 및 스트림 모드를 사용하여 <see cref="T:System.Security.Cryptography.CryptoStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">암호화 변환을 수행할 스트림입니다. </param>
      <param name="transform">스트림에 대해 수행될 암호화 변환입니다. </param>
      <param name="mode">
        <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 값 중 하나입니다. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />을 읽을 수 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />에 쓸 수 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />이 잘못되었습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" />을 읽을 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 스트림을 읽을 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" /> 내에서 검색할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 false입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" />에 쓸 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 스트림에 쓸 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.CryptoStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true로 설정하고, 관리되지 않는 리소스만 해제하려면 false로 설정합니다. </param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
      <summary>현재 스트림의 모든 버퍼를 지우면 버퍼링된 모든 데이터가 내부 장치에 쓰여집니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>현재 스트림에 대해 모든 버퍼를 비동기적으로 지우고 버퍼링된 데이터가 내부 장치에 쓰여지도록 하고 취소 요청을 모니터링합니다.</summary>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제된 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
      <summary>내부 데이터 소스 또는 리포지토리에 버퍼의 현재 상태를 업데이트한 다음 해당 버퍼를 지웁니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키가 손상되어 스트림에 대한 잘못된 패딩이 발생할 수 있는 경우 </exception>
      <exception cref="T:System.NotSupportedException">현재 스트림에 쓸 수 없는 경우또는 최종 블록이 이미 변환된 경우 </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock">
      <summary>마지막 버퍼 블록을 내부 스트림에 썼는지 여부를 나타내는 값을 가져옵니다. </summary>
      <returns>마지막 블록을 플러시했으면 true이고, 그렇지 않으면 false입니다. </returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
      <summary>스트림의 길이(바이트)를 가져옵니다.</summary>
      <returns>이 속성이 지원되지 않는 경우</returns>
      <exception cref="T:System.NotSupportedException">이 속성이 지원되지 않는 경우 </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
      <summary>현재 스트림 내의 위치를 가져오거나 설정합니다.</summary>
      <returns>이 속성이 지원되지 않는 경우</returns>
      <exception cref="T:System.NotSupportedException">이 속성이 지원되지 않는 경우 </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 스트림에서 위치를 앞으로 이동합니다.</summary>
      <returns>버퍼로 읽어온 총 바이트 수입니다.총 바이트 수는 요청된 바이트를 현재 사용할 수 없는 경우 이 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 됩니다.</returns>
      <param name="buffer">바이트 배열입니다.최대 <paramref name="count" /> 바이트를 현재 스트림에서 읽어 <paramref name="buffer" />에 저장합니다.</param>
      <param name="offset">현재 스트림에서 읽은 데이터를 저장하기 시작하는 <paramref name="buffer" />의 바이트 오프셋입니다. </param>
      <param name="count">현재 스트림에서 읽을 최대 바이트 수입니다. </param>
      <exception cref="T:System.NotSupportedException">현재 <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 개체와 관련된 <see cref="T:System.Security.Cryptography.CryptoStream" />가 내부 스트림과 일치하지 않는 경우.예를 들어, <see cref="F:System.Security.Cryptography.CryptoStreamMode.Read" />를 쓰기 전용인 내부 스트림과 함께 사용하는 경우에 이 예외가 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 매개 변수가 0보다 작은 경우또는 <paramref name="count" /> 매개 변수가 0보다 작은 경우 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" />와 <paramref name="offset" /> 매개 변수의 합계가 버퍼의 길이보다 긴 경우 </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고 읽은 바이트 수만큼 스트림 내에서 앞으로 이동하며 취소 요청을 모니터링합니다.</summary>
      <returns>비동기 읽기 작업을 나타내는 작업입니다.작업 개체의 <paramref name="TResult" /> 매개 변수 값은 버퍼로 읽어들인 총 바이트 수를 포함합니다.현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과는 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림의 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />와 <paramref name="count" />의 합계가 버퍼 길이보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 읽기 작업에서 현재 스트림을 사용하고 있습니다. </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>현재 스트림 내에서 위치를 설정합니다.</summary>
      <returns>이 메서드는 지원되지 않습니다.</returns>
      <param name="offset">
        <paramref name="origin" /> 매개 변수에 상대적인 바이트 오프셋입니다. </param>
      <param name="origin">새 위치를 가져오는 데 사용되는 참조 위치를 나타내는 <see cref="T:System.IO.SeekOrigin" /> 개체입니다. </param>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다. </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
      <summary>현재 스트림의 길이를 설정합니다.</summary>
      <param name="value">원하는 현재 스트림의 길이(바이트)입니다. </param>
      <exception cref="T:System.NotSupportedException">이 속성은 <see cref="T:System.IO.Stream" />으로부터의 상속을 지원하기 위해서만 존재하므로 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" />에 바이트 시퀀스를 쓰고 스트림 내의 현재 위치를 쓰여진 바이트 수만큼 앞으로 이동합니다.</summary>
      <param name="buffer">바이트 배열입니다.이 메서드는 <paramref name="buffer" />의 <paramref name="count" /> 바이트를 현재 스트림으로 복사합니다.</param>
      <param name="offset">현재 스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다. </param>
      <param name="count">현재 스트림에 쓸 바이트 수입니다. </param>
      <exception cref="T:System.NotSupportedException">현재 <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 개체와 관련된 <see cref="T:System.Security.Cryptography.CryptoStream" />가 내부 스트림과 일치하지 않는 경우.예를 들어, <see cref="F:System.Security.Cryptography.CryptoStreamMode.Write" />를 읽기 전용인 내부 스트림과 함께 사용하는 경우에 이 예외가 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 매개 변수가 0보다 작은 경우또는 <paramref name="count" /> 매개 변수가 0보다 작은 경우 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" />와 <paramref name="offset" /> 매개 변수의 합계가 버퍼의 길이보다 긴 경우 </exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림에 바이트를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />와 <paramref name="count" />의 합계가 버퍼 길이보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림을 사용하고 있습니다. </exception>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
      <summary>암호화 스트림의 모드를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
      <summary>암호화 스트림의 액세스를 읽습니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
      <summary>암호화 스트림의 액세스를 씁니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
      <summary>기본 암호화 변환 작업을 정의합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
      <summary>현재 변환을 다시 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 변환을 다시 사용할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
      <summary>여러 개의 블록을 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>여러 개의 블록을 변환할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
      <summary>입력 블록 크기를 가져옵니다.</summary>
      <returns>입력 데이터 블록의 크기(바이트)입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
      <summary>출력 블록 크기를 가져옵니다.</summary>
      <returns>출력 데이터 블록의 크기(바이트)입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>입력 바이트 배열의 지정된 영역을 변환한 다음 변환 결과를 출력 바이트 배열의 지정된 영역으로 복사합니다.</summary>
      <returns>쓰여진 바이트 수입니다.</returns>
      <param name="inputBuffer">변환을 계산하는 입력입니다. </param>
      <param name="inputOffset">데이터 사용을 시작할 입력 바이트 배열의 오프셋입니다. </param>
      <param name="inputCount">데이터로 사용할 입력 바이트 배열의 바이트 수입니다. </param>
      <param name="outputBuffer">변환을 기록하는 것으로의 출력입니다. </param>
      <param name="outputOffset">데이터 쓰기를 시작할 출력 바이트 배열의 오프셋입니다. </param>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이트 배열의 지정된 영역을 변환합니다.</summary>
      <returns>연산된 변환입니다.</returns>
      <param name="inputBuffer">변환을 계산하는 입력입니다. </param>
      <param name="inputOffset">데이터 사용을 시작할 바이트 배열의 오프셋입니다. </param>
      <param name="inputCount">데이터로 사용할 바이트 배열의 바이트 수입니다. </param>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
      <summary>대칭 암호화 알고리즘에 대한 유효한 키 크기 세트를 결정합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>지정된 키 값을 사용하여 <see cref="T:System.Security.Cryptography.KeySizes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="minSize">최소 유효 키 크기입니다. </param>
      <param name="maxSize">최대 유효 키 크기입니다. </param>
      <param name="skipSize">유효 키 크기간 간격입니다. </param>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
      <summary>최대 키 크기를 bps 단위로 지정합니다.</summary>
      <returns>bps 단위의 최대 키 크기입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
      <summary>최소 키 크기를 bps 단위로 지정합니다.</summary>
      <returns>bps 단위의 최소 키 크기입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
      <summary>유효 키 크기간 간격을 bps 단위로 지정합니다.</summary>
      <returns>bps 단위의 유효 키 크기간 간격입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.PaddingMode">
      <summary>메시지 데이터 블록이 암호화 작업에 필요한 전체 바이트 수보다 짧을 때 적용할 패딩 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.None">
      <summary>아무 것도 채워지지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.PKCS7">
      <summary>PKCS #7 패딩 문자열은 바이트 시퀀스로 구성되어 있으며, 각각의 시퀀스는 추가된 패딩 바이트의 전체 수와 동일합니다. </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.Zeros">
      <summary>패딩 문자열은 0으로 설정된 바이트로 구성됩니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
      <summary>모든 대칭 알고리즘의 구현에서 상속해야 하는 추상 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">대칭 알고리즘에서 의 구현이 잘못된 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
      <summary>암호화 작업의 블록 크기(비트)를 가져오거나 설정합니다.</summary>
      <returns>블록 크기(비트)입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">블록 크기가 잘못된 경우 </exception>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
      <summary>현재 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 암호 해독기 개체를 만듭니다.</summary>
      <returns>대칭 암호 해독기 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 지정된 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 암호 해독기 개체를 만듭니다.</summary>
      <returns>대칭 암호 해독기 개체입니다.</returns>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다. </param>
      <param name="rgbIV">대칭 알고리즘에 사용할 초기화 벡터입니다. </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
      <summary>현재 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 암호기 개체를 만듭니다.</summary>
      <returns>대칭 암호기 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 지정된 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 암호기 개체를 만듭니다.</summary>
      <returns>대칭 암호기 개체입니다.</returns>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다. </param>
      <param name="rgbIV">대칭 알고리즘에 사용할 초기화 벡터입니다. </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true로 설정하고, 관리되지 않는 리소스만 해제하려면 false로 설정합니다. </param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
      <summary>파생 클래스에서 재정의된 경우 알고리즘에 사용할 임의 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 생성합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
      <summary>파생 클래스에서 재정의된 경우 알고리즘에 사용할 난수 키(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)를 생성합니다. </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
      <summary>대칭 알고리즘에 대한 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 가져오거나 설정합니다.</summary>
      <returns>초기화 벡터입니다.</returns>
      <exception cref="T:System.ArgumentNullException">초기화 벡터를 null로 설정하려고 한 경우 </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">초기화 벡터를 잘못된 크기로 설정하려고 한 경우 </exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
      <summary>대칭 알고리즘에 대한 비밀 키를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용할 비밀 키입니다.</returns>
      <exception cref="T:System.ArgumentNullException">키를 null로 설정하려고 한 경우 </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 크기가 잘못된 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
      <summary>대칭 알고리즘에서 사용하는 비밀 키의 크기(비트)를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에서 사용하는 비밀 키의 크기(비트)입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 크기가 잘못된 경우 </exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
      <summary>대칭 알고리즘에서 지원하는 블록 크기(비트)를 가져옵니다.</summary>
      <returns>알고리즘에서 지원하는 블록 크기가 들어 있는 배열입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
      <summary>대칭 알고리즘에서 지원하는 키 크기(비트)를 가져옵니다.</summary>
      <returns>알고리즘에서 지원하는 키 크기가 들어 있는 배열입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Mode">
      <summary>대칭 알고리즘의 작업 모드를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘의 작업 모드입니다.기본값은 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호화 모드가 <see cref="T:System.Security.Cryptography.CipherMode" /> 값 중 하나가 아닌 경우 </exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Padding">
      <summary>대칭 알고리즘에 사용된 패딩 모드를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용된 패딩 모드입니다.기본값은 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">패딩 모드가 <see cref="T:System.Security.Cryptography.PaddingMode" /> 값 중 하나가 아닌 경우 </exception>
    </member>
  </members>
</doc>